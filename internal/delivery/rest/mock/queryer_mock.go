// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/screwyprof/golibs/queryer/queryer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryRunner is a mock of QueryRunner interface
type MockQueryRunner struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRunnerMockRecorder
}

// MockQueryRunnerMockRecorder is the mock recorder for MockQueryRunner
type MockQueryRunnerMockRecorder struct {
	mock *MockQueryRunner
}

// NewMockQueryRunner creates a new mock instance
func NewMockQueryRunner(ctrl *gomock.Controller) *MockQueryRunner {
	mock := &MockQueryRunner{ctrl: ctrl}
	mock.recorder = &MockQueryRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryRunner) EXPECT() *MockQueryRunnerMockRecorder {
	return m.recorder
}

// RunQuery mocks base method
func (m *MockQueryRunner) RunQuery(ctx context.Context, query, report interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", ctx, query, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunQuery indicates an expected call of RunQuery
func (mr *MockQueryRunnerMockRecorder) RunQuery(ctx, query, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockQueryRunner)(nil).RunQuery), ctx, query, report)
}
