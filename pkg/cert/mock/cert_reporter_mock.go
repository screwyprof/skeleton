// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cert/usecase/viewcert/view_certificate.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	report "github.com/screwyprof/skeleton/pkg/cert/report"
)

// MockCertReporter is a mock of CertReporter interface
type MockCertReporter struct {
	ctrl     *gomock.Controller
	recorder *MockCertReporterMockRecorder
}

// MockCertReporterMockRecorder is the mock recorder for MockCertReporter
type MockCertReporterMockRecorder struct {
	mock *MockCertReporter
}

// NewMockCertReporter creates a new mock instance
func NewMockCertReporter(ctrl *gomock.Controller) *MockCertReporter {
	mock := &MockCertReporter{ctrl: ctrl}
	mock.recorder = &MockCertReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertReporter) EXPECT() *MockCertReporterMockRecorder {
	return m.recorder
}

// CertificateByID mocks base method
func (m *MockCertReporter) CertificateByID(ctx context.Context, certificateID string) (report.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateByID", ctx, certificateID)
	ret0, _ := ret[0].(report.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertificateByID indicates an expected call of CertificateByID
func (mr *MockCertReporterMockRecorder) CertificateByID(ctx, certificateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateByID", reflect.TypeOf((*MockCertReporter)(nil).CertificateByID), ctx, certificateID)
}
